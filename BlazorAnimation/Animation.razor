@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@inject IOptionsSnapshot<AnimationOptions> OptionsSnapshot

<div @ref="DivElementReference" class="@Animate @AnimationType" @attributes="@AdditionalAttributes" style="@($"animation-duration: {Speed.TotalMilliseconds}ms;animation-delay : {Delay.TotalMilliseconds}ms;animation-iteration-count: {IterationCount};");">
    @ChildContent
</div>

@code {

    protected override void OnParametersSet() => ApplyConfiguration();

    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            var dotNetReference = DotNetObjectReference.Create(this);
            JsRuntime.InvokeVoidAsync("AnimatedComponent.animationend", DivElementReference, dotNetReference);
        }
    }

    private ElementReference DivElementReference;

    private string Animate => Enabled ? "animate__animated" : string.Empty;

    private string AnimationType => Enabled ? "animate__" + Effect?.Name : string.Empty;

    [Parameter] public RenderFragment ChildContent { get; set; }

    [Parameter] public bool Enabled { get; set; } = true;

    [Parameter] public string OptionsName { get; set; } = Options.DefaultName;

    [Parameter] public AnimationEffect Effect { get; set; }

    [Parameter] public TimeSpan Delay { get; set; } = BlazorAnimation.Delay.None;

    [Parameter] public TimeSpan Speed { get; set; } = BlazorAnimation.Speed.Slow;

    [Parameter]
    public int IterationCount
    {
        get => _iterationCount < 0 ? int.MaxValue : _iterationCount;
        set => _iterationCount = value;
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; }

    [JSInvokable("OnAnimationEnd")]
    public async void AnimationEnd() => await _animationEnd.InvokeAsync(this);

    private EventCallback _animationEnd;
    private int _iterationCount = 1;

    [CascadingParameter(Name = "OnAnimationEnd")]
    private EventCallback CascadingOnAnimationEnd
    {
        set => _animationEnd = value;
    }

    [Parameter]
    public EventCallback OnAnimationEnd
    {
        set => _animationEnd = value;
    }

    private void ApplyConfiguration()
    {
        var options = OptionsSnapshot.Get(OptionsName);
        if (options == null) return;
        Effect = options.Effect ?? Effect;
        Delay = options.Delay ?? Delay;
        Speed = options.Speed ?? Speed;
        IterationCount = options.IterationCount ?? IterationCount;
        Enabled = options.Enabled ?? Enabled;
    }
}

