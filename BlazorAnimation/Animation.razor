@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
<div @ref="divElementReference" class="@Animate @AnimationType customAnimation">
    @ChildContent
</div>

@code {

    ElementReference divElementReference;

    protected override void OnAfterRender(bool firstRender) {
        base.OnAfterRender(firstRender);
        if (firstRender) {
            var dotNetReference = DotNetObjectReference.Create(this);
            JsRuntime.InvokeVoidAsync("AnimatedComponent.animationend", divElementReference, dotNetReference);
        }
    }

    private string Animate => Active ? "animated" : string.Empty;

    private string AnimationType => Active ? Effect?.Name : string.Empty;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public bool Active { get; set; } = true;

    [Parameter]
    public CssEffect Effect { get; set; }

    [Parameter]
    public TimeSpan Delay { get; set; } = BlazorAnimation.Delay.None;

    [Parameter]
    public TimeSpan Speed { get; set; } = BlazorAnimation.Speed.Slow;

    [Parameter]
    public int IterationCount { get; set; }

    [JSInvokable("OnAnimationEnd")]
    public async void AnimationEnd()
    {
        await _animationEnd.InvokeAsync(this);
    }

    private EventCallback _animationEnd;

    [CascadingParameter(Name = "OnAnimationEnd")]
    public EventCallback CascadingOnAnimationEnd
    {
        set => _animationEnd = value;
    }

    [Parameter]
    public EventCallback OnAnimationEnd
    {
        set => _animationEnd = value;
    }
}

<style>
    .customAnimation {
        @($"animation-duration: {Speed.TotalMilliseconds}ms;" +
        $"animation-delay : {Delay.TotalMilliseconds}ms;" +
        $"animation-iteration-count: {IterationCount};");
    }
</style>
